// Generated by CoffeeScript 1.6.3
(function() {
  var DAM_SQUARE, DEFAULT_MAGNIFICATION, FIT_N_RENTALS, GreatCircle, MAX_DISTANCE, centerAndFitMap, coordinatesInAms, locateUser, map, meMarker, myPosition, populateMap, rentalTemplateFn, sortMarkersByDistance,
    _this = this;

  DAM_SQUARE = {
    lat: 52.373,
    lng: 4.893
  };

  DEFAULT_MAGNIFICATION = 14;

  MAX_DISTANCE = 12;

  FIT_N_RENTALS = 2;

  GreatCircle = {
    deg2rad: function(deg) {
      return deg * Math.PI / 180;
    },
    rad2deg: function(rad) {
      return rad * 180 / Math.PI;
    },
    R_KAVRAISKOGO: 6373,
    NINE_MINUTES_IN_RAD: 0.00261799388,
    latGeoToSpherical: function(thetaGeoDeg) {
      var theta;
      theta = this.deg2rad(thetaGeoDeg);
      return theta - (this.NINE_MINUTES_IN_RAD * (Math.sin(2 * theta)));
    },
    distance: function(lat1, lon1, lat2, lon2) {
      var cosDist, deltaL;
      lat1 = this.latGeoToSpherical(lat1);
      lon1 = this.deg2rad(lon1);
      lat2 = this.latGeoToSpherical(lat2);
      lon2 = this.deg2rad(lon2);
      deltaL = lon1 - lon2;
      cosDist = Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(deltaL);
      return Math.acos(cosDist) * this.R_KAVRAISKOGO;
    }
  };

  coordinatesInAms = function(latlon) {
    var distance;
    distance = GreatCircle.distance(latlon.lat, latlon.lng, DAM_SQUARE.lat, DAM_SQUARE.lng);
    return distance < MAX_DISTANCE;
  };

  centerAndFitMap = function(latlon, closestMarkers) {
    var interestAreaGrp, meMarker;
    meMarker = L.marker(new L.LatLng(latlon.lat, latlon.lng), {
      icon: L.mapbox.marker.icon({
        'marker-color': 'bb0000',
        'marker-symbol': 'star-stroked',
        "marker-size": 'large'
      }),
      draggable: true
    });
    meMarker.addTo(map);
    closestMarkers.push(meMarker);
    interestAreaGrp = new L.featureGroup(closestMarkers);
    return map.fitBounds(interestAreaGrp, {
      paddingTopLeft: [3, 3],
      paddingBottomRight: [3, 3]
    });
  };

  myPosition = DAM_SQUARE;

  map = L.mapbox.map('map', 'karenishe.map-pxxvu0dq', {
    detectRetina: true,
    retinaVersion: 'karenishe.map-2s2oc75l'
  }).addControl(L.mapbox.geocoderControl('karenishe.map-pxxvu0dq'));

  meMarker = null;

  rentalTemplateFn = Handlebars.compile($("#rentaltpl").html());

  locateUser = function(fnOnceComplete) {
    var _this = this;
    if (navigator.geolocation) {
      map.on('locationfound', function(e) {
        if (coordinatesInAms(e.latlng)) {
          myPosition = e.latlng;
          console.debug('User totally located, fitting');
          return fnOnceComplete();
        } else {
          console.debug("Person not even close to AMS");
          return fnOnceComplete();
        }
      });
      map.on('locationerror', function() {
        console.error('Geolocation off or declined');
        return fnOnceComplete();
      });
      return map.locate();
    } else {
      console.error("No location support");
      return fnOnceComplete();
    }
  };

  sortMarkersByDistance = function(markers) {
    var marker, markerCoords, _i, _len;
    for (_i = 0, _len = markers.length; _i < _len; _i++) {
      marker = markers[_i];
      markerCoords = marker.getLatLng();
      marker._distance = GreatCircle.distance(myPosition.lat, myPosition.lng, markerCoords.lat, markerCoords.lng);
    }
    return markers.sort(function(a, b) {
      if (a._distance < b._distance) {
        return -1;
      }
      if (a._distance > b._distance) {
        return 1;
      }
      return 0;
    });
  };

  populateMap = function(e) {
    var allRentalMarkers;
    allRentalMarkers = [];
    e.target.eachLayer(function(marker) {
      var content;
      allRentalMarkers.push(marker);
      content = rentalTemplateFn(marker.feature.properties);
      return marker.bindPopup(content, {
        closeButton: true,
        maxWidth: 200
      });
    });
    return locateUser(function() {
      var closestRentals;
      sortMarkersByDistance(allRentalMarkers);
      closestRentals = allRentalMarkers.slice(0, +FIT_N_RENTALS + 1 || 9e9);
      return centerAndFitMap(myPosition, closestRentals);
    });
  };

  L.mapbox.markerLayer().addTo(map).on('ready', populateMap).loadURL('markers.geojson');

}).call(this);
